- name: Install packegs on all server postgres, master and slave
  hosts: database
  become: yes
  tasks:
    - name: Install packeges postgres
      ansible.builtin.package:
        name:
          - postgresql
          - postgresql-contrib
        state: latest


- name: Configure master db
  hosts: db
  become: yes
  vars_files:
    - vars.yml
  environment:
    DB_USER: "{{DB_USER}}"
    DB_PASSWORD: "{{DB_PASSWORD}}"
    DB_HOST: "{{DB_HOST}}"
    DB_PORT: "{{DB_PORT}}"
    DB_DATABASE: "{{DB_DATABASE}}"
    DB_REPL_USER: "{{DB_REPL_USER}}"
    DB_REPL_PASSWORD: "{{DB_REPL_PASSWORD}}"
  tasks:
    - name: Copy postgresql.conf
      ansible.builtin.copy:
        src: ./postgresql.conf
        dest: /etc/postgresql/14/main/
        owner: postgres
        group: postgres
        mode: '644'
        backup: yes
    - name: Copy pg_hba.conf
      ansible.builtin.copy:
        src: ./pg_hba.conf
        dest: /etc/postgresql/14/main/
        owner: postgres
        group: postgres
        mode: '644'
        backup: yes
    - name: Startup database server
      ansible.builtin.service:
        name: postgresql
        state: started
        enabled: yes
    - name: Create replication directory
      ansible.builtin.file:
        path: /oracle/pg_data/archive/
        state: directory
        owner: postgres
        group: postgres
        mode: '774'
    - name: Change password for postgres
      command: >
          psql -c "ALTER ROLE postgres PASSWORD '{{DB_PASSWORD}}';"
      become: yes
      become_user: postgres
    - name: Create user for replication
      become: yes
      become_user: postgres
      command: >
        psql -c "DO
        $$
        BEGIN
          IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '{{DB_REPL_USER}}') THEN
            CREATE USER \"{{DB_REPL_USER}}\" WITH REPLICATION ENCRYPTED PASSWORD '{{DB_REPL_PASSWORD}}';
          END IF;
        END
        $$;"
    - name: Create database
      become: yes
      become_user: postgres
      postgresql_db:
        name: "{{DB_DATABASE}}"
        owner: "{{DB_USER}}"
    - name: Create email table
      become: yes
      become_user: postgres
      postgresql_query:
        db: "{{DB_DATABASE}}"
        query: >
          CREATE TABLE IF NOT EXISTS email_table (
              id SERIAL PRIMARY KEY,
              email VARCHAR(255) UNIQUE NOT NULL
          );
    - name: Create phone table
      become: yes
      become_user: postgres
      postgresql_query:
        db: "{{DB_DATABASE}}"
        query: >
          CREATE TABLE IF NOT EXISTS phone_table (
              id SERIAL PRIMARY KEY,
              phone_number VARCHAR(20) UNIQUE NOT NULL
          );
    - name: Insert test data into email table
      become: yes
      become_user: postgres
      postgresql_query:
        db: "{{DB_DATABASE}}"
        query: >
          INSERT INTO email_table (id, email) VALUES 
              (DEFAULT, 'asdfasdf@mail.ru'), 
              (DEFAULT, 'adsghadfgfff@gmail.com') ON CONFLICT DO NOTHING;
    - name: Insert test data into phone table
      become: yes
      become_user: postgres
      postgresql_query:
        db: "{{DB_DATABASE}}"
        query: >
          INSERT INTO phone_table (id, phone_number) VALUES 
              (DEFAULT, '81234567890'), 
              (DEFAULT, '+71233341299') ON CONFLICT DO NOTHING;


- hosts: db_repls
  vars_files:
    - vars.yml
  tasks:
    - service:
        name: postgresql
        state: stopped
      become: true
    - file:
        path: /var/lib/postgresql/14/main/
        state: absent
      become: true
    - file:
        path: /var/lib/postgresql/14/main/
        owner: postgres
        group: postgres
        mode: 0700
        state: directory
      become: true
    - name: Start replicating
      ansible.builtin.expect:
        command: pg_basebackup -P -R -X stream -D /var/lib/postgresql/14/main/ -h {{DB_HOST}} -U {{DB_REPL_USER}} 
        responses:
          Password: '{{DB_REPL_PASSWORD}}'
      become: true
      become_user: postgres
    - service:
        name: postgresql
        state: started
      become: true


- name: Configure and setup telegram bot
  hosts: bot
  vars_files:
    - vars.yml
  become: yes
  environment:
    TOKEN: "{{TOKEN}}"
    RM_HOST: "{{RM_HOST}}"
    RM_PORT: "{{RM_PORT}}"
    RM_USER: "{{RM_USER}}"
    RM_PASSWORD: "{{RM_PASSWORD}}"
    DB_USER: "{{DB_USER}}"
    DB_PASSWORD: "{{DB_PASSWORD}}"
    DB_HOST: "{{DB_HOST}}"
    DB_PORT: "{{DB_PORT}}"
    DB_DATABASE: "{{DB_DATABASE}}"
  tasks:
    - name: Print Telegram Token
      debug:
        msg: "The Telegram Token is {{ TOKEN }}"
    - name: Install python main package and git
      ansible.builtin.package:
        name:
          - libpq-dev
          - python3-dev
          - python3-pip
          - python3
          - pip
          - git
        state: latest
    - name: Setup bot from git, docker branch
      ansible.builtin.git:
        repo: 'https://github.com/asfDRT/shiny-lamp.git'
        version: docker
        dest: /home/ubuntudb/works/bot/
    - name: Install specified python requirements
      ansible.builtin.pip:
        requirements: /home/ubuntudb/works/bot/devops_bot/bot/requirements.txt
    - name: Startup bot
      shell: python3 /home/ubuntudb/works/bot/devops_bot/bot/sql.py
      shell: python3 /home/ubuntudb/works/bot/devops_bot/bot/main.py
      args:
        chdir: /home/ubuntudb/works/bot/devops_bot/bot/